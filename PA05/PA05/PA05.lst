Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/19/16 13:26:54
PA05.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;----------------------------------------------------
				;	FILE:			PA05.asm
				;
				;	AUTHOR:			Keith Ecker
				;
				;	DESCRIPTION:	Boolean Calculator for 32-bit integers
				;
				;	DATE:			11/19/16
				;
				;	COMMENT:		None
				;----------------------------------------------------

				ExitProcess proto,dwExitCode:dword

				;----------------------------------------------------
				;	DATA SEGMENT
				;----------------------------------------------------

 00000000			.data
 00000000 45 6E 74 65 72		hexNumPrompt1 BYTE "Enter a hexadecimal integer ",0
	   20 61 20 68 65
	   78 61 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 20 00
 0000001D 45 6E 74 65 72		hexNumPrompt2 BYTE "Enter two hexadecimal integers ",0
	   20 74 77 6F 20
	   68 65 78 61 64
	   65 63 69 6D 61
	   6C 20 69 6E 74
	   65 67 65 72 73
	   20 00
 0000003D 50 6C 65 61 73		menuPrompt BYTE "Please enter a number to select a menu option:",13,10
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 74 6F 20
	   73 65 6C 65 63
	   74 20 61 20 6D
	   65 6E 75 20 6F
	   70 74 69 6F 6E
	   3A 0D 0A
 0000006D  31 2E 20 78 20			   BYTE "1. x AND y",13,10
	   41 4E 44 20 79
	   0D 0A
 00000079  32 2E 20 78 20			   BYTE "2. x OR y",13,10
	   4F 52 20 79 0D
	   0A
 00000084  33 2E 20 4E 4F			   BYTE "3. NOT x",13,10
	   54 20 78 0D 0A
 0000008E  34 2E 20 78 20			   BYTE "4. x XOR y",13,10
	   58 4F 52 20 79
	   0D 0A
 0000009A  35 2E 20 45 78			   BYTE "5. Exit Program",13,10,0
	   69 74 20 50 72
	   6F 67 72 61 6D
	   0D 0A 00
 000000AC 45 78 69 74 69		exitPrompt BYTE "Exiting program",0
	   6E 67 20 70 72
	   6F 67 72 61 6D
	   00
 000000BC 49 6E 63 6F 72		incorrectInputPrompt BYTE "Incorrect input please try again.",0
	   72 65 63 74 20
	   69 6E 70 75 74
	   20 70 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 2E 00
 000000DE 20 41 4E 44 20		AND_opPrompt BYTE " AND ",0
	   00
 000000E4 20 4F 52 20 00		OR_opPrompt BYTE " OR ",0
 000000E9 20 4E 4F 54 20		NOT_opPrompt BYTE " NOT ",0
	   00
 000000EF 20 58 4F 52 20		XOR_opPrompt BYTE " XOR ",0
	   00
 000000F5 20 3D 20 00			EqualsPrompt BYTE " = ",0
					

				;----------------------------------------------------
				;	CODE SEGMENT
				;----------------------------------------------------

 00000000			.code

				;----------------------------------------------------
				;	MAIN PROCEDURE
				;
				;		Takes user input and calculates one of multiple boolean instructions and prints the result
				;
				;----------------------------------------------------

 00000000			main proc
					
 00000000				Beginning:
						
 00000000  E8 00000000 E			call Crlf
						
 00000005  E8 00000055				call displayMenu								;Displays menu
						
 0000000A  BB 00000001				mov ebx, 1										;Gets 1 hex int from user
 0000000F  E8 00000186				call getUserInput
						
 00000014  83 F8 01				cmp eax,1										;If Input=1
 00000017  74 25				JE input1
						
 00000019  83 F8 02				cmp eax,2										;If Input=2
 0000001C  74 27				JE input2
						
 0000001E  83 F8 03				cmp eax,3										;If Input=3
 00000021  74 29				JE input3
						
 00000023  83 F8 04				cmp eax,4										;If Input=4
 00000026  74 2B				JE input4
						
 00000028  83 F8 05				cmp eax,5										;If Input=5
 0000002B  74 2D				JE input5
						
 0000002D  E8 00000000 E			call Clrscr										;If Input is not 1-5 tell user to enter another number and jump
 00000032  BA 000000BC R			mov edx, OFFSET incorrectInputPrompt			;back to beginning
 00000037  E8 00000000 E			call WriteString

 0000003C  EB C2			jmp Beginning										
						
 0000003E					Input1:											;If Input=1 
 0000003E  E8 00000027					call AND_op
 00000043  EB BB				jmp Beginning
						
 00000045					Input2:											;If Input=2
 00000045  E8 00000068					call OR_op
 0000004A  EB B4				jmp Beginning
						
 0000004C					Input3:											;If Input=3
 0000004C  E8 000000A9					call NOT_op
 00000051  EB AD				jmp Beginning
						
 00000053					Input4:											;If Input=4
 00000053  E8 000000DF					call XOR_op
 00000058  EB A6				jmp Beginning
						
 0000005A					Input5:											;If Input=5
 0000005A  E8 00000120					call EXIT_op
 0000005F			main endp

				;-----------------------------------------------------
				;	DISPLAY MENU PROCEDURE
				;		Displays menu for boolean calculator
				;
				;		Receives: None 
				;	
				;		Returns: None
				;
				;		Requires: menuPrpmpt is a byte that contains the menu string that is to be printed 
				;	
				;-----------------------------------------------------
 0000005F			displayMenu proc

 0000005F  BA 0000003D R		mov edx, OFFSET menuPrompt							;Writes menuPrompt
 00000064  E8 00000000 E		call WriteString
					
 00000069  C3				ret													;Return

 0000006A			displayMenu endp

				;-----------------------------------------------------
				;	AND OP PROCEDURE
				;
				;		Gets two hex integers from user, ANDs them, and then prints the result as 'input1 AND input2 = end value' 
				;
				;		Receives: None
				;
				;		Returns: EAX = input1 AND input2, EBX= input2, ECX = input1
				;
				;		Requires: AND_opPrompt is a byte string that contains'AND', EqualsPrompt is a byte string that contains '='
				;
				;-----------------------------------------------------
 0000006A			AND_op proc
					
 0000006A  E8 00000000 E		call Clrscr											;Clears screen
					
 0000006F  BB 00000002			mov ebx, 2											;Gets two hex integers from user stored in eax, ebx
 00000074  E8 00000121			call getUserInput	
					
 00000079  8B C8			mov ecx, eax										;ECX = input1
					
 0000007B  23 C3			AND eax, ebx										;EAX= input1 AND input2
						
 0000007D  8B D0			mov edx, eax										;Uses EDX to store End value while EAX is used for WriteHex
					
 0000007F  E8 00000000 E		call Clrscr

 00000084  8B C1			mov eax, ecx										;Writes input1
 00000086  E8 00000000 E		call WriteHex
					
 0000008B  8B C2			mov eax, edx

 0000008D  BA 000000DE R		mov edx, OFFSET AND_opPrompt						;Writes 'AND'
 00000092  E8 00000000 E		call WriteString
					
 00000097  8B D0			mov edx, eax

 00000099  8B C3			mov eax, ebx										;Writes input2
 0000009B  E8 00000000 E		call WriteHex
					
 000000A0  8B C2			mov eax, edx

 000000A2  BA 000000F5 R		mov edx, OFFSET EqualsPrompt						;Writes '='
 000000A7  E8 00000000 E		call WriteString
					
 000000AC  E8 00000000 E		call WriteHex										;Writes input1 AND input2
					
 000000B1  C3				ret													;Return
					
 000000B2			AND_op endp

				;-----------------------------------------------------
				;	OR OP PROCEDURE
				;
				;		Gets two hex integers from user, ORs them, and then prints the result as 'input1 OR input2 = end value'	
				;
				;		Receives: None
				;
				;		Returns: EAX = input1 AND input2, EBX= input2, ECX = input1
				;
				;		Requires: OR_opPrompt is a byte string that contains 'OR', EqualsPrompt is a byte string that contains '='
				;	
				;-----------------------------------------------------
 000000B2			OR_op proc
					
 000000B2  E8 00000000 E		call Clrscr											;Clears screen
					
 000000B7  BB 00000002			mov ebx, 2											;Gets 2 hex integers from user and stored in eax, ebx
 000000BC  E8 000000D9			call getUserInput
					
 000000C1  8B C8			mov ecx,eax											;ECX = input1
					
 000000C3  0B C3			OR eax, ebx											;EAX = input1 OR input2
					
 000000C5  8B D0			mov edx, eax										;Uses EDX to store End value while EAX is used for WriteHex
					
 000000C7  E8 00000000 E		call Clrscr
					
 000000CC  8B C1			mov eax, ecx										;Writes input1									
 000000CE  E8 00000000 E		call WriteHex
					
 000000D3  8B C2			mov eax, edx

 000000D5  BA 000000E4 R		mov edx, OFFSET OR_opPrompt							;Writes 'OR'
 000000DA  E8 00000000 E		call WriteString
						
 000000DF  8B D0			mov edx,eax

 000000E1  8B C3			mov eax, ebx										;Writes input2
 000000E3  E8 00000000 E		call WriteHex
					
 000000E8  8B C2			mov eax,edx
					
 000000EA  BA 000000F5 R		mov edx, OFFSET EqualsPrompt						;Writes '='
 000000EF  E8 00000000 E		call WriteString
					
 000000F4  E8 00000000 E		call WriteHex										;Writes input1 OR input2
					
 000000F9  C3				ret													;Return

 000000FA			OR_op endp
				;-----------------------------------------------------
				;	NOT OP PROCEDURE
				;
				;	Gets a hex integer from user, Nots it, and then prints the result as 'NOT input1 = end value'
				;
				;	Receives: None
				;
				;	Returns: EAX = NOT input1, EBX= input1
				;
				;	Requires: NOT_opPrompt is a byte string that contains 'NOT', EqualsPrompt is a byte string that contains '='
				;
				;-----------------------------------------------------
 000000FA			NOT_op proc
					
 000000FA  E8 00000000 E		call Clrscr											;Clears screen
					
 000000FF  BB 00000001			mov ebx, 1											;Gets 1 hex integer from user and stored in ebx
 00000104  E8 00000091			call getUserInput
					
 00000109  8B D8			mov ebx, eax										;EBX = input1

 0000010B  F7 D0			NOT eax												;EAX = NOT input1
					
 0000010D  8B C8			mov ecx, eax										;Uses ECX to store end value while eax is used for WriteHex
					
 0000010F  E8 00000000 E		call Clrscr	
					
 00000114  BA 000000E9 R		mov edx, OFFSET NOT_opPrompt						;Writes 'NOT'
 00000119  E8 00000000 E		call WriteString
					
 0000011E  8B C3			mov eax, ebx										;Writes input1									
 00000120  E8 00000000 E		call WriteHex
					
 00000125  BA 000000F5 R		mov edx, OFFSET EqualsPrompt						;Writes '='
 0000012A  E8 00000000 E		call WriteString
					
 0000012F  8B C1			mov eax, ecx										;Writes NOT input1
 00000131  E8 00000000 E		call WriteHex	
					
 00000136  C3				ret													;Return

 00000137			NOT_op endp
				;-----------------------------------------------------
				;	XOR OP PROCEDURE
				;
				;	Gets two hex integers from user, XORs them, and then prints the result as 'input1 XOR input2 = end value'
				;	
				;	Recieves: None
				;
				;	Returns: EAX = input1 AND input2, EBX= input2, ECX = input1
				;
				;	Requires: XOR_opPrompt is a byte string that contains 'XOR', EqualsPrompt is a byte string that contains '='
				;
				;-----------------------------------------------------
 00000137			XOR_op proc
					
 00000137  E8 00000000 E		call Clrscr											;Clears screen
					
 0000013C  BB 00000002			mov ebx, 2											;Gets 2 hex integers from user and stores in EAX, EBX
 00000141  E8 00000054			call getUserInput
					
 00000146  8B C8			mov ecx, eax										;ECX = input1
					
 00000148  33 C3			XOR eax, ebx										;EAX = input1 XOR input2
					
 0000014A  8B D0			mov edx, eax										;Uses EDX to store End value while EAX is used for WriteHex
					
 0000014C  E8 00000000 E		call Clrscr
					
 00000151  8B C1			mov eax, ecx										;Writes input1
 00000153  E8 00000000 E		call WriteHex
					
 00000158  8B C2			mov eax, edx

 0000015A  BA 000000EF R		mov edx, OFFSET XOR_opPrompt						;Writes 'XOR'
 0000015F  E8 00000000 E		call WriteString
					
 00000164  8B D0			mov edx, eax
					
 00000166  8B C3			mov eax, ebx										;Writes input2
 00000168  E8 00000000 E		call WriteHex
					
 0000016D  8B C2			mov eax, edx

 0000016F  BA 000000F5 R		mov edx, OFFSET EqualsPrompt						;Writes '='
 00000174  E8 00000000 E		call WriteString
														
 00000179  E8 00000000 E		call WriteHex										;Writes input1 XOR input2
					
 0000017E  C3				ret													;Return

 0000017F			XOR_op endp

				;-----------------------------------------------------
				;	EXIT OP PROCEDURE
				;
				;	Prints a prompt then exits program
				;
				;	Receives: None
				;
				;	Returns: None
				;
				;	Requires: exitPrompt is a byte string that contains the message to be printed before exiting program
				;
				;-----------------------------------------------------
 0000017F			EXIT_op proc

 0000017F  E8 00000000 E		call Clrscr											;Clears screen
					
 00000184  BA 000000AC R		mov edx, OFFSET exitPrompt							;Writes Exit Prompt
 00000189  E8 00000000 E		call WriteString
					
 0000018E  E8 00000000 E		call Crlf

					;--- Exit Program ---
					invoke ExitProcess,0								;Exits program

 0000019A			EXIT_op endp

				;-----------------------------------------------------
				;	GET USER INPUT PROCEDURE
				;
				;	Gets 2 or 1 hex integers from user then stores them in eax, ebx
				;
				;	Recives: EBX for number of inputs, if EBX = 1 get 1 input otherwise get 2 inputs
				;
				;	Returns: EAX = input1, EBX = input2, ECX = input1
				;
				;	Requires: hexNumPrompt2 is a byte string that contains the message to be printed before user inputs 2 hex integers
				;			  hexNumPrompt1 is a byte string that contains the message to be printed before user inputs 1 hex integer
				;
				;-----------------------------------------------------
 0000019A			getUserInput proc
					
 0000019A  83 FB 01			cmp ebx,1											;If EBX = 1	
 0000019D  74 1B			JE oneInput
					
						;--- If EBX != 1 ---

 0000019F  BA 0000001D R			mov edx, OFFSET hexNumPrompt2					;Writes Prompt for user to enter two hex integers
 000001A4  E8 00000000 E			call WriteString

 000001A9  E8 00000000 E			call ReadHex									;Reads hex integer from user
						
 000001AE  8B C8				mov ecx, eax									;Stores input1 in ECX while EAX is used for ReadHex
						
 000001B0  E8 00000000 E			call ReadHex

 000001B5  8B D8				mov ebx, eax									;EBX = input2
						
 000001B7  8B C1				mov eax, ecx									;EAX = input1
						
 000001B9  C3					ret												;Return
					
						;--- If EBX = 1 ---
					
 000001BA				oneInput:											

 000001BA  BA 00000000 R			mov edx, OFFSET hexNumPrompt1					;Writes prompt for user to enter one hex integer
 000001BF  E8 00000000 E			call WriteString

 000001C4  E8 00000000 E			call ReadHex									;EAX = input1
					
 000001C9  C3					ret												;Return

 000001CA			getUserInput endp

				end main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/19/16 13:26:54
PA05.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000F9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001CA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AND_op . . . . . . . . . . . . .	P Near	 0000006A _TEXT	Length= 00000048 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EXIT_op  . . . . . . . . . . . .	P Near	 0000017F _TEXT	Length= 0000001B Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NOT_op . . . . . . . . . . . . .	P Near	 000000FA _TEXT	Length= 0000003D Public STDCALL
OR_op  . . . . . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 00000048 Public STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
XOR_op . . . . . . . . . . . . .	P Near	 00000137 _TEXT	Length= 00000048 Public STDCALL
displayMenu  . . . . . . . . . .	P Near	 0000005F _TEXT	Length= 0000000B Public STDCALL
getUserInput . . . . . . . . . .	P Near	 0000019A _TEXT	Length= 00000030 Public STDCALL
  oneInput . . . . . . . . . . .	L Near	 000001BA _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000005F Public STDCALL
  Beginning  . . . . . . . . . .	L Near	 00000000 _TEXT	
  Input1 . . . . . . . . . . . .	L Near	 0000003E _TEXT	
  Input2 . . . . . . . . . . . .	L Near	 00000045 _TEXT	
  Input3 . . . . . . . . . . . .	L Near	 0000004C _TEXT	
  Input4 . . . . . . . . . . . .	L Near	 00000053 _TEXT	
  Input5 . . . . . . . . . . . .	L Near	 0000005A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AND_opPrompt . . . . . . . . . .	Byte	 000000DE _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EqualsPrompt . . . . . . . . . .	Byte	 000000F5 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NOT_opPrompt . . . . . . . . . .	Byte	 000000E9 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OR_opPrompt  . . . . . . . . . .	Byte	 000000E4 _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
XOR_opPrompt . . . . . . . . . .	Byte	 000000EF _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exitPrompt . . . . . . . . . . .	Byte	 000000AC _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hexNumPrompt1  . . . . . . . . .	Byte	 00000000 _DATA	
hexNumPrompt2  . . . . . . . . .	Byte	 0000001D _DATA	
incorrectInputPrompt . . . . . .	Byte	 000000BC _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuPrompt . . . . . . . . . . .	Byte	 0000003D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
